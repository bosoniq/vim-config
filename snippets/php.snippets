global !p
def read_composer_json():
	import json

	composer_file = 'composer.json'
	if not os.path.isfile(composer_file): return

	with open(composer_file) as data_file:
		config = json.load(data_file)

	return config

def get_autoload_paths():
	config = read_composer_json()

	if 'autoload' not in config: return []
	if 'psr-4' not in config['autoload']: return []

	paths = config['autoload']['psr-4']

	if 'autoload-dev' in config and 'psr-4' in config['autoload-dev']:
		 paths.update(config['autoload-dev']['psr-4'])

	return paths

def get_namespace():
	dir_path = os.path.dirname(path) + '/'
	for ns, fp in get_autoload_paths().items():
		m = re.search(r'' + re.escape(fp) + '(.*)', dir_path)
		if m: return (ns.strip('\\') + '\\' + m.group(1).replace('/', '\\')).strip('\\')

def is_custom_type(type):
	return (len(t[1]) > 0 and t[1][0].isupper())

def lowercase_first(string):
	if len(string) < 1: return ''

	return string[0].lower() + string[1:]

def uppercase_first(string):
	if len(string) < 1: return ''

	return string[0].upper() + string[1:]

endglobal


snippet docTodo "Todo message" b
//	TODO: ${1:message}
endsnippet

snippet docNote "Note message" b
//	NOTE: ${1:message}
endsnippet

snippet docParam "Phpdoc param" w
@param ${1:type} $${2:name}
endsnippet

snippet docReturn "Phpdoc return" w
@return ${1:type}
endsnippet

snippet docThrows "Phpdoc throws" w
@throws ${1:exception}
endsnippet

snippet shout "php echo and exit"
echo '${1}'; exit;
endsnippet

snippet dd "php dd()"
dd($${1});
endsnippet

snippet eqstring "equals string" w
'' === $${1}
endsnippet

snippet eqnull "equals null" w
null === $${1}
endsnippet

snippet eqarray "equals array" w
[] === $${1}
endsnippet

snippet mkConstructor "php constructor" b
public function __construct(private `!p snip.rv = uppercase_first(t[1])` $${1})
{
}
endsnippet

snippet mkInvoke "php invoke" b
public function __invoke(private `!p snip.rv = uppercase_first(t[1])` $${1}): void
{
}
endsnippet

snippet mkInstanceProperty "assign local variable to instance variable" b
$this->${1} = $$1;
endsnippet

snippet mkGetSet "Setter and Getter" b

/** @var ${1} */
private $${2:`!p if is_custom_type(t[1]): snip.rv = lowercase_first(t[1])`};

`!p snip.rv = '/** @param ' + t[1] + ' $' + t[2] + ' */'`
public function set`!p snip.rv = uppercase_first(t[2])`(`!p if is_custom_type(t[1]): snip.rv = t[1] + ' '`$$2)
{
	$this->$2 = `!p snip.rv = '' if is_custom_type(t[1]) else '(' + t[1] + ') '`$$2;
}

/** @return $1 */
public function get`!p snip.rv = uppercase_first(t[2])`()
{
	return $this->$2;
}
endsnippet

snippet mkProperty "property" b
protected $${2:`!p if (is_custom_type(t[1])): snip.rv = lowercase_first(t[1])`};
endsnippet

snippet mkMethod "method" b
${1:public} function ${2:Name}(${3:string} $${4:param}): ${5:void}
{
	$0
}
endsnippet

snippet mkGetter "getter" b
public function ${2:`!p snip.rv = t[1] if is_custom_type(t[1]) else ''`}()
{
	return $this->`!p snip.rv = lowercase_first(t[2])`;
}
endsnippet

snippet mkGetterSilent "getter without get prefix" b
public function ${1}(): ${2:type}
{
	return $this->${1}
}
endsnippet

snippet map "array map" b
array_map(function($${1:value}) {
	return $3;
}, $$2);
endsnippet

snippet filter "array filter" b
array_filter($$1, function($${2:value}) {
	return $3;
});
endsnippet

snippet mkTestMethod "make test" b
/**
 * @Given
 * @When
 * @Then
 */
public function test${1}(): void
{
	// Given

	// When

	// Then
	self::assertTrue(true);
}
endsnippet

snippet mkTestSetup "make test setup method" b
protected function setUp(): void
{
	parent::setUp();

	private `!p snip.rv = uppercase_first(t[1])`|MockObject $${1};
	$this->${1} = $this->getMock(`!p snip.rv = uppercase_first(t[1])`::class);

	$this->${2} = new `!p snip.rv = uppercase_first(t[2])`(
		$this->${1},
	);
}
endsnippet

snippet mkTestMock "make test mock class" b
$this->${1} = $this->getMock(`!p snip.rv = uppercase_first(t[1])`::class);
endsnippet

snippet mkTestMockDeclaration "make test mock parameter declaration" b
private `!p snip.rv = uppercase_first(t[1])`|MockObject $${1};
endsnippet

snippet mkTestMockCall "make test mock method call" b
$this->${1}->expects(self::once())
	->method('${2}')
	->with(${3})
	->willReturn(${4})
endsnippet
